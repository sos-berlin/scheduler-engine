// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#include "_precompiled.h"

#include "com__sos__scheduler__engine__kernel__processclass__agent__StartResult.h"
#include "java__lang__Object.h"
#include "java__lang__String.h"
#include "scala__util__Try.h"

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace kernel { namespace processclass { namespace agent { 

struct StartResult__class : ::zschimmer::javabridge::Class
{
    StartResult__class(const string& class_name);
   ~StartResult__class();

    ::zschimmer::javabridge::Method const _agentUri____method;
    ::zschimmer::javabridge::Method const _result____method;

    static const ::zschimmer::javabridge::class_factory< StartResult__class > class_factory;
};

const ::zschimmer::javabridge::class_factory< StartResult__class > StartResult__class::class_factory ("com.sos.scheduler.engine.kernel.processclass.agent.StartResult");

StartResult__class::StartResult__class(const string& class_name) :
    ::zschimmer::javabridge::Class(class_name)
    ,_agentUri____method(this, "agentUri", "()Ljava/lang/String;")
    ,_result____method(this, "result", "()Lscala/util/Try;"){}

StartResult__class::~StartResult__class() {}




StartResult::StartResult(jobject jo) { if (jo) assign_(jo); }

StartResult::StartResult(const StartResult& o) { assign_(o.get_jobject()); }

#ifdef Z_HAS_MOVE_CONSTRUCTOR
    StartResult::StartResult(StartResult&& o) { set_jobject(o.get_jobject());  o.set_jobject(NULL); }
#endif

StartResult::~StartResult() { assign_(NULL); }




::javaproxy::java::lang::String StartResult::agentUri() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    StartResult__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_agentUri____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::scala::util::Try StartResult::result() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    StartResult__class* cls = _class.get();
    ::javaproxy::scala::util::Try result;
    result.steal_local_ref(cls->_result____method.jobject_call(get_jobject(), parameter_list));
    return result;
}


::zschimmer::javabridge::Class* StartResult::java_object_class_() const { return _class.get(); }

::zschimmer::javabridge::Class* StartResult::java_class_() { return StartResult__class::class_factory.clas(); }


void StartResult::Lazy_class::initialize() const {
    _value = StartResult__class::class_factory.clas();
}


}}}}}}}}
