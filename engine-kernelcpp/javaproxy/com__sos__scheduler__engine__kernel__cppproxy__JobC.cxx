// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#include "_precompiled.h"

#include "com__sos__scheduler__engine__kernel__cppproxy__JobC.h"
#include "com__sos__scheduler__engine__data__job__TaskPersistentState.h"
#include "com__sos__scheduler__engine__kernel__cppproxy__Variable_setC.h"
#include "java__lang__Object.h"
#include "java__lang__String.h"
#include "java__util__List.h"

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace kernel { namespace cppproxy { 

struct JobC__class : ::zschimmer::javabridge::Class
{
    JobC__class(const string& class_name);
   ~JobC__class();


    static const ::zschimmer::javabridge::class_factory< JobC__class > class_factory;
};

const ::zschimmer::javabridge::class_factory< JobC__class > JobC__class::class_factory ("com.sos.scheduler.engine.kernel.cppproxy.JobC");

JobC__class::JobC__class(const string& class_name) :
    ::zschimmer::javabridge::Class(class_name)
{}

JobC__class::~JobC__class() {}




JobC::JobC(jobject jo) { if (jo) assign_(jo); }

JobC::JobC(const JobC& o) { assign_(o.get_jobject()); }

#ifdef Z_HAS_MOVE_CONSTRUCTOR
    JobC::JobC(JobC&& o) { set_jobject(o.get_jobject());  o.set_jobject(NULL); }
#endif

JobC::~JobC() { assign_(NULL); }





::zschimmer::javabridge::Class* JobC::java_object_class_() const { return _class.get(); }

::zschimmer::javabridge::Class* JobC::java_class_() { return JobC__class::class_factory.clas(); }


void JobC::Lazy_class::initialize() const {
    _value = JobC__class::class_factory.clas();
}


}}}}}}}
