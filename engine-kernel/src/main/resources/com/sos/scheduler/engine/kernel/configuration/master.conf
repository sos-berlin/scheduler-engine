jobscheduler.master {
  webserver {
    https {
      keystore {
        # file = ${jobscheduler.master.data.directory}/private/private-https.jks
        password = "jobscheduler"
        key-password = "jobscheduler"
      }
    }

    auth {
      realm = "JobScheduler Master"
      invalid-authentication-delay = 1s
      http-is-public = true
      get-is-public = false
    }

    csrf {
      # For a list of cross-site HTML 5 form POST content types, see https://www.w3.org/TR/html5/forms.html#attr-fs-enctype
      reject-post-content-types: [ application/x-www-form-urlencoded, multipart/form-data, text/plain ]
    }

    log {
      level = Debug
      elapsed-time = off
    }
  }

  database {
    read-timeout = 30s
  }

  # No default empty group 'users', to let Scheduler fail if authentication without users has been configured.
  # Place in private/private.conf !
  #auth.users {
  #  NAME = "sha256:PASSWORD" or "plain:PASSWORD"
  #}

  event {
    queue-size = 10000
    timeout-limit = 1 hour
  }

  agents {
    https {
      keystore {
        # file = ${jobscheduler.master.data.directory}/agent-https.jkss
        password = "jobscheduler"
        key-password = "jobscheduler"
      }
    }
  }
}

hikari {
  # Configuration of HikariCP. See https://github.com/brettwooldridge/HikariCP#configuration-knobs-baby
  # Preset: autoCommit = false
}

akka {
  loglevel = DEBUG
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  log-dead-letters = 0
  scheduler.tick-duration = 1s   # Or 100ms - With default (10ms under Windows), we have 1% CPU usage when idling
  jvm-exit-on-fatal-error = false
}

spray.can {
  server {
    # If a request hasn't been responded to after the time period set here
    # a `spray.http.Timedout` message will be sent to the timeout handler.
    # Set to `infinite` to completely disable request timeouts.
    request-timeout = 1 day

    # The time after which an idle connection will be automatically closed.
    # Set to `infinite` to completely disable idle connection timeouts.
    ## For Spray, it must be longer than request-timeout
    idle-timeout = 86460s

    # Enables/disables the addition of a `Remote-Address` header
    # holding the clients (remote) IP address.
    ## For NewWebServicePlugin's logging
    remote-address-header = on

    # Enables/disables the addition of a `Raw-Request-URI` header holding the
    # original raw request URI as the client has sent it.
    ## For NewWebServicePlugin's forwarder to C++ web server
    raw-request-uri-header = on

    # Enables/disables the returning of more detailed error messages to
    # the client in the error response.
    # Should be disabled for browser-facing APIs due to the risk of XSS attacks
    # and (probably) enabled for internal or non-browser APIs.
    # Note that spray will always produce log messages containing the full
    # error details.
    #verbose-error-messages = off

    # Enables/disables the logging of the full (potentially multiple line)
    # error message to the server logs.
    # If disabled only a single line will be logged.
    #verbose-error-logging = off
  }
  client {
    # The time after which an idle connection will be automatically closed.
    # Set to `infinite` to completely disable idle timeouts.
    # idle-timeout should be shorter than any firewall timeout. See also the servers Akka configuration. -Zschimmer
    idle-timeout = 300s  # Spray seems to double this time. JS-1617

    # The time period within which the TCP connecting process must be completed. Set to `infinite` to disable.
    connecting-timeout = 30s

    # The max time period that a client connection will be waiting for a response
    # before triggering a request timeout. The timer for this logic is not started
    # until the connection is actually in a state to receive the response, which
    # may be quite some time after the request has been received from the
    # application!
    # There are two main reasons to delay the start of the request timeout timer:
    # 1. On the host-level API with pipelining disabled:
    #    If the request cannot be sent immediately because all connections are
    #    currently busy with earlier requests it has to be queued until a
    #    connection becomes available.
    # 2. With pipelining enabled:
    #    The request timeout timer starts only once the response for the
    #    preceding request on the connection has arrived.
    # Set to `infinite` to completely disable request timeouts.
    request-timeout = infinite
  }
  host-connector {
    # The maximum number of parallel connections that an `HttpHostConnector`
    # is allowed to establish to a host. Must be greater than zero.
    max-connections = 2100   # Makes 1000 tasks possible (with 1 tunnel and possibly one waiting task close command for each task)

    # The maximum number of times an `HttpHostConnector` attempts to repeat failed requests (if the request can be safely retried) before giving up and returning an error.
    max-retries = 0
  }
}
