// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

package com.sos.scheduler.engine.kernel.cppproxy;

@javax.annotation.Generated("C++/Java-Generator - SOS GmbH Berlin")
@SuppressWarnings({"unchecked", "rawtypes"})
final class Job_chainCImpl
extends com.sos.scheduler.engine.cplusplus.runtime.CppProxyImpl<com.sos.scheduler.engine.kernel.order.jobchain.JobChain>
implements com.sos.scheduler.engine.kernel.cppproxy.Job_chainC {

    // <editor-fold defaultstate="collapsed" desc="Generated code - DO NOT EDIT">

    private Job_chainCImpl(com.sos.scheduler.engine.cplusplus.runtime.Sister context) { // Nur für JNI zugänglich
        setSister(com.sos.scheduler.engine.kernel.cppproxy.Job_chainC$.MODULE$.sisterType().sister(this, context));
    }

    @Override public String[] blacklistedOrderIds() {
        com.sos.scheduler.engine.cplusplus.runtime.CppProxy$.MODULE$.requireCppThread();
        try {
            String[] result = blacklistedOrderIds__native(cppReference());
            checkIsNotReleased(String[].class, result);
            return result;
        }
        catch (Exception x) { throw com.sos.scheduler.engine.cplusplus.runtime.CppProxies.propagateCppException(x, this); }
    }

    private static native String[] blacklistedOrderIds__native(long cppReference);


    @Override public java.lang.String default_process_class_path() {
        com.sos.scheduler.engine.cplusplus.runtime.CppProxy$.MODULE$.requireCppThread();
        try {
            java.lang.String result = default_process_class_path__native(cppReference());
            checkIsNotReleased(java.lang.String.class, result);
            return result;
        }
        catch (Exception x) { throw com.sos.scheduler.engine.cplusplus.runtime.CppProxies.propagateCppException(x, this); }
    }

    private static native java.lang.String default_process_class_path__native(long cppReference);


    @Override public java.lang.String file() {
        com.sos.scheduler.engine.cplusplus.runtime.CppProxy$.MODULE$.requireCppThread();
        try {
            java.lang.String result = file__native(cppReference());
            checkIsNotReleased(java.lang.String.class, result);
            return result;
        }
        catch (Exception x) { throw com.sos.scheduler.engine.cplusplus.runtime.CppProxies.propagateCppException(x, this); }
    }

    private static native java.lang.String file__native(long cppReference);


    @Override public java.lang.String file_based_error_string() {
        com.sos.scheduler.engine.cplusplus.runtime.CppProxy$.MODULE$.requireCppThread();
        try {
            java.lang.String result = file_based_error_string__native(cppReference());
            checkIsNotReleased(java.lang.String.class, result);
            return result;
        }
        catch (Exception x) { throw com.sos.scheduler.engine.cplusplus.runtime.CppProxies.propagateCppException(x, this); }
    }

    private static native java.lang.String file_based_error_string__native(long cppReference);


    @Override public int file_based_state() {
        com.sos.scheduler.engine.cplusplus.runtime.CppProxy$.MODULE$.requireCppThread();
        try {
            return file_based_state__native(cppReference());
        }
        catch (Exception x) { throw com.sos.scheduler.engine.cplusplus.runtime.CppProxies.propagateCppException(x, this); }
    }

    private static native int file_based_state__native(long cppReference);


    @Override public long file_modification_time_t() {
        com.sos.scheduler.engine.cplusplus.runtime.CppProxy$.MODULE$.requireCppThread();
        try {
            return file_modification_time_t__native(cppReference());
        }
        catch (Exception x) { throw com.sos.scheduler.engine.cplusplus.runtime.CppProxies.propagateCppException(x, this); }
    }

    private static native long file_modification_time_t__native(long cppReference);


    @Override public java.lang.String file_watching_process_class_path() {
        com.sos.scheduler.engine.cplusplus.runtime.CppProxy$.MODULE$.requireCppThread();
        try {
            java.lang.String result = file_watching_process_class_path__native(cppReference());
            checkIsNotReleased(java.lang.String.class, result);
            return result;
        }
        catch (Exception x) { throw com.sos.scheduler.engine.cplusplus.runtime.CppProxies.propagateCppException(x, this); }
    }

    private static native java.lang.String file_watching_process_class_path__native(long cppReference);


    @Override public boolean has_base_file() {
        com.sos.scheduler.engine.cplusplus.runtime.CppProxy$.MODULE$.requireCppThread();
        try {
            return has_base_file__native(cppReference());
        }
        catch (Exception x) { throw com.sos.scheduler.engine.cplusplus.runtime.CppProxies.propagateCppException(x, this); }
    }

    private static native boolean has_base_file__native(long cppReference);


    @Override public boolean is_distributed() {
        com.sos.scheduler.engine.cplusplus.runtime.CppProxy$.MODULE$.requireCppThread();
        try {
            return is_distributed__native(cppReference());
        }
        catch (Exception x) { throw com.sos.scheduler.engine.cplusplus.runtime.CppProxies.propagateCppException(x, this); }
    }

    private static native boolean is_distributed__native(long cppReference);


    @Override public boolean is_file_based() {
        com.sos.scheduler.engine.cplusplus.runtime.CppProxy$.MODULE$.requireCppThread();
        try {
            return is_file_based__native(cppReference());
        }
        catch (Exception x) { throw com.sos.scheduler.engine.cplusplus.runtime.CppProxies.propagateCppException(x, this); }
    }

    private static native boolean is_file_based__native(long cppReference);


    @Override public boolean is_file_based_reread() {
        com.sos.scheduler.engine.cplusplus.runtime.CppProxy$.MODULE$.requireCppThread();
        try {
            return is_file_based_reread__native(cppReference());
        }
        catch (Exception x) { throw com.sos.scheduler.engine.cplusplus.runtime.CppProxies.propagateCppException(x, this); }
    }

    private static native boolean is_file_based_reread__native(long cppReference);


    @Override public boolean is_to_be_removed() {
        com.sos.scheduler.engine.cplusplus.runtime.CppProxy$.MODULE$.requireCppThread();
        try {
            return is_to_be_removed__native(cppReference());
        }
        catch (Exception x) { throw com.sos.scheduler.engine.cplusplus.runtime.CppProxies.propagateCppException(x, this); }
    }

    private static native boolean is_to_be_removed__native(long cppReference);


    @Override public boolean is_visible() {
        com.sos.scheduler.engine.cplusplus.runtime.CppProxy$.MODULE$.requireCppThread();
        try {
            return is_visible__native(cppReference());
        }
        catch (Exception x) { throw com.sos.scheduler.engine.cplusplus.runtime.CppProxies.propagateCppException(x, this); }
    }

    private static native boolean is_visible__native(long cppReference);


    @Override public boolean java_file_order_source_alert_when_directory_missing(int p0) {
        com.sos.scheduler.engine.cplusplus.runtime.CppProxy$.MODULE$.requireCppThread();
        try {
            return java_file_order_source_alert_when_directory_missing__native(cppReference(), p0);
        }
        catch (Exception x) { throw com.sos.scheduler.engine.cplusplus.runtime.CppProxies.propagateCppException(x, this); }
    }

    private static native boolean java_file_order_source_alert_when_directory_missing__native(long cppReference, int p0);


    @Override public long java_file_order_source_delay_after_error_millis(int p0) {
        com.sos.scheduler.engine.cplusplus.runtime.CppProxy$.MODULE$.requireCppThread();
        try {
            return java_file_order_source_delay_after_error_millis__native(cppReference(), p0);
        }
        catch (Exception x) { throw com.sos.scheduler.engine.cplusplus.runtime.CppProxies.propagateCppException(x, this); }
    }

    private static native long java_file_order_source_delay_after_error_millis__native(long cppReference, int p0);


    @Override public java.lang.String java_file_order_source_directory(int p0) {
        com.sos.scheduler.engine.cplusplus.runtime.CppProxy$.MODULE$.requireCppThread();
        try {
            java.lang.String result = java_file_order_source_directory__native(cppReference(), p0);
            checkIsNotReleased(java.lang.String.class, result);
            return result;
        }
        catch (Exception x) { throw com.sos.scheduler.engine.cplusplus.runtime.CppProxies.propagateCppException(x, this); }
    }

    private static native java.lang.String java_file_order_source_directory__native(long cppReference, int p0);


    @Override public String[] java_file_order_source_files(int p0) {
        com.sos.scheduler.engine.cplusplus.runtime.CppProxy$.MODULE$.requireCppThread();
        try {
            String[] result = java_file_order_source_files__native(cppReference(), p0);
            checkIsNotReleased(String[].class, result);
            return result;
        }
        catch (Exception x) { throw com.sos.scheduler.engine.cplusplus.runtime.CppProxies.propagateCppException(x, this); }
    }

    private static native String[] java_file_order_source_files__native(long cppReference, int p0);


    @Override public long[] java_file_order_source_files_last_modified(int p0) {
        com.sos.scheduler.engine.cplusplus.runtime.CppProxy$.MODULE$.requireCppThread();
        try {
            long[] result = java_file_order_source_files_last_modified__native(cppReference(), p0);
            checkIsNotReleased(long[].class, result);
            return result;
        }
        catch (Exception x) { throw com.sos.scheduler.engine.cplusplus.runtime.CppProxies.propagateCppException(x, this); }
    }

    private static native long[] java_file_order_source_files_last_modified__native(long cppReference, int p0);


    @Override public java.lang.String java_file_order_source_regex(int p0) {
        com.sos.scheduler.engine.cplusplus.runtime.CppProxy$.MODULE$.requireCppThread();
        try {
            java.lang.String result = java_file_order_source_regex__native(cppReference(), p0);
            checkIsNotReleased(java.lang.String.class, result);
            return result;
        }
        catch (Exception x) { throw com.sos.scheduler.engine.cplusplus.runtime.CppProxies.propagateCppException(x, this); }
    }

    private static native java.lang.String java_file_order_source_regex__native(long cppReference, int p0);


    @Override public long java_file_order_source_repeat_millis(int p0) {
        com.sos.scheduler.engine.cplusplus.runtime.CppProxy$.MODULE$.requireCppThread();
        try {
            return java_file_order_source_repeat_millis__native(cppReference(), p0);
        }
        catch (Exception x) { throw com.sos.scheduler.engine.cplusplus.runtime.CppProxies.propagateCppException(x, this); }
    }

    private static native long java_file_order_source_repeat_millis__native(long cppReference, int p0);


    @Override public Object[] java_nodes() {
        com.sos.scheduler.engine.cplusplus.runtime.CppProxy$.MODULE$.requireCppThread();
        try {
            Object[] result = java_nodes__native(cppReference());
            checkIsNotReleased(Object[].class, result);
            return result;
        }
        catch (Exception x) { throw com.sos.scheduler.engine.cplusplus.runtime.CppProxies.propagateCppException(x, this); }
    }

    private static native Object[] java_nodes__native(long cppReference);


    @Override public Object[] java_orders() {
        com.sos.scheduler.engine.cplusplus.runtime.CppProxy$.MODULE$.requireCppThread();
        try {
            Object[] result = java_orders__native(cppReference());
            checkIsNotReleased(Object[].class, result);
            return result;
        }
        catch (Exception x) { throw com.sos.scheduler.engine.cplusplus.runtime.CppProxies.propagateCppException(x, this); }
    }

    private static native Object[] java_orders__native(long cppReference);


    @Override public com.sos.scheduler.engine.kernel.cppproxy.Prefix_logC log() {
        com.sos.scheduler.engine.cplusplus.runtime.CppProxy$.MODULE$.requireCppThread();
        try {
            com.sos.scheduler.engine.kernel.cppproxy.Prefix_logC result = log__native(cppReference());
            checkIsNotReleased(com.sos.scheduler.engine.kernel.cppproxy.Prefix_logC.class, result);
            return result;
        }
        catch (Exception x) { throw com.sos.scheduler.engine.cplusplus.runtime.CppProxies.propagateCppException(x, this); }
    }

    private static native com.sos.scheduler.engine.kernel.cppproxy.Prefix_logC log__native(long cppReference);


    @Override public int max_orders() {
        com.sos.scheduler.engine.cplusplus.runtime.CppProxy$.MODULE$.requireCppThread();
        try {
            return max_orders__native(cppReference());
        }
        catch (Exception x) { throw com.sos.scheduler.engine.cplusplus.runtime.CppProxies.propagateCppException(x, this); }
    }

    private static native int max_orders__native(long cppReference);


    @Override public String[] missing_requisites_java() {
        com.sos.scheduler.engine.cplusplus.runtime.CppProxy$.MODULE$.requireCppThread();
        try {
            String[] result = missing_requisites_java__native(cppReference());
            checkIsNotReleased(String[].class, result);
            return result;
        }
        catch (Exception x) { throw com.sos.scheduler.engine.cplusplus.runtime.CppProxies.propagateCppException(x, this); }
    }

    private static native String[] missing_requisites_java__native(long cppReference);


    @Override public java.lang.String name() {
        com.sos.scheduler.engine.cplusplus.runtime.CppProxy$.MODULE$.requireCppThread();
        try {
            java.lang.String result = name__native(cppReference());
            checkIsNotReleased(java.lang.String.class, result);
            return result;
        }
        catch (Exception x) { throw com.sos.scheduler.engine.cplusplus.runtime.CppProxies.propagateCppException(x, this); }
    }

    private static native java.lang.String name__native(long cppReference);


    @Override public boolean name_is_fixed() {
        com.sos.scheduler.engine.cplusplus.runtime.CppProxy$.MODULE$.requireCppThread();
        try {
            return name_is_fixed__native(cppReference());
        }
        catch (Exception x) { throw com.sos.scheduler.engine.cplusplus.runtime.CppProxies.propagateCppException(x, this); }
    }

    private static native boolean name_is_fixed__native(long cppReference);


    @Override public int nondistributed_blacklisted_order_count() {
        com.sos.scheduler.engine.cplusplus.runtime.CppProxy$.MODULE$.requireCppThread();
        try {
            return nondistributed_blacklisted_order_count__native(cppReference());
        }
        catch (Exception x) { throw com.sos.scheduler.engine.cplusplus.runtime.CppProxies.propagateCppException(x, this); }
    }

    private static native int nondistributed_blacklisted_order_count__native(long cppReference);


    @Override public int nondistributed_order_count() {
        com.sos.scheduler.engine.cplusplus.runtime.CppProxy$.MODULE$.requireCppThread();
        try {
            return nondistributed_order_count__native(cppReference());
        }
        catch (Exception x) { throw com.sos.scheduler.engine.cplusplus.runtime.CppProxies.propagateCppException(x, this); }
    }

    private static native int nondistributed_order_count__native(long cppReference);


    @Override public com.sos.scheduler.engine.kernel.cppproxy.OrderC order(java.lang.String p0) {
        com.sos.scheduler.engine.cplusplus.runtime.CppProxy$.MODULE$.requireCppThread();
        try {
            com.sos.scheduler.engine.kernel.cppproxy.OrderC result = order__native(cppReference(), p0);
            checkIsNotReleased(com.sos.scheduler.engine.kernel.cppproxy.OrderC.class, result);
            return result;
        }
        catch (Exception x) { throw com.sos.scheduler.engine.cplusplus.runtime.CppProxies.propagateCppException(x, this); }
    }

    private static native com.sos.scheduler.engine.kernel.cppproxy.OrderC order__native(long cppReference, java.lang.String p0);


    @Override public java.lang.String order_id_space_name() {
        com.sos.scheduler.engine.cplusplus.runtime.CppProxy$.MODULE$.requireCppThread();
        try {
            java.lang.String result = order_id_space_name__native(cppReference());
            checkIsNotReleased(java.lang.String.class, result);
            return result;
        }
        catch (Exception x) { throw com.sos.scheduler.engine.cplusplus.runtime.CppProxies.propagateCppException(x, this); }
    }

    private static native java.lang.String order_id_space_name__native(long cppReference);


    @Override public com.sos.scheduler.engine.kernel.cppproxy.OrderC order_or_null(java.lang.String p0) {
        com.sos.scheduler.engine.cplusplus.runtime.CppProxy$.MODULE$.requireCppThread();
        try {
            com.sos.scheduler.engine.kernel.cppproxy.OrderC result = order_or_null__native(cppReference(), p0);
            checkIsNotReleased(com.sos.scheduler.engine.kernel.cppproxy.OrderC.class, result);
            return result;
        }
        catch (Exception x) { throw com.sos.scheduler.engine.cplusplus.runtime.CppProxies.propagateCppException(x, this); }
    }

    private static native com.sos.scheduler.engine.kernel.cppproxy.OrderC order_or_null__native(long cppReference, java.lang.String p0);


    @Override public int order_source_count() {
        com.sos.scheduler.engine.cplusplus.runtime.CppProxy$.MODULE$.requireCppThread();
        try {
            return order_source_count__native(cppReference());
        }
        catch (Exception x) { throw com.sos.scheduler.engine.cplusplus.runtime.CppProxies.propagateCppException(x, this); }
    }

    private static native int order_source_count__native(long cppReference);


    @Override public java.lang.String path() {
        com.sos.scheduler.engine.cplusplus.runtime.CppProxy$.MODULE$.requireCppThread();
        try {
            java.lang.String result = path__native(cppReference());
            checkIsNotReleased(java.lang.String.class, result);
            return result;
        }
        catch (Exception x) { throw com.sos.scheduler.engine.cplusplus.runtime.CppProxies.propagateCppException(x, this); }
    }

    private static native java.lang.String path__native(long cppReference);


    @Override public void remove() {
        com.sos.scheduler.engine.cplusplus.runtime.CppProxy$.MODULE$.requireCppThread();
        try {
            remove__native(cppReference());
        }
        catch (Exception x) { throw com.sos.scheduler.engine.cplusplus.runtime.CppProxies.propagateCppException(x, this); }
    }

    private static native void remove__native(long cppReference);


    @Override public com.sos.scheduler.engine.kernel.filebased.FileBased replacement_java() {
        com.sos.scheduler.engine.cplusplus.runtime.CppProxy$.MODULE$.requireCppThread();
        try {
            com.sos.scheduler.engine.kernel.filebased.FileBased result = replacement_java__native(cppReference());
            checkIsNotReleased(com.sos.scheduler.engine.kernel.filebased.FileBased.class, result);
            return result;
        }
        catch (Exception x) { throw com.sos.scheduler.engine.cplusplus.runtime.CppProxies.propagateCppException(x, this); }
    }

    private static native com.sos.scheduler.engine.kernel.filebased.FileBased replacement_java__native(long cppReference);


    @Override public void set_force_file_reread() {
        com.sos.scheduler.engine.cplusplus.runtime.CppProxy$.MODULE$.requireCppThread();
        try {
            set_force_file_reread__native(cppReference());
        }
        catch (Exception x) { throw com.sos.scheduler.engine.cplusplus.runtime.CppProxies.propagateCppException(x, this); }
    }

    private static native void set_force_file_reread__native(long cppReference);


    @Override public byte[] source_xml_bytes() {
        com.sos.scheduler.engine.cplusplus.runtime.CppProxy$.MODULE$.requireCppThread();
        try {
            byte[] result = source_xml_bytes__native(cppReference());
            checkIsNotReleased(byte[].class, result);
            return result;
        }
        catch (Exception x) { throw com.sos.scheduler.engine.cplusplus.runtime.CppProxies.propagateCppException(x, this); }
    }

    private static native byte[] source_xml_bytes__native(long cppReference);


    @Override public int state() {
        com.sos.scheduler.engine.cplusplus.runtime.CppProxy$.MODULE$.requireCppThread();
        try {
            return state__native(cppReference());
        }
        catch (Exception x) { throw com.sos.scheduler.engine.cplusplus.runtime.CppProxies.propagateCppException(x, this); }
    }

    private static native int state__native(long cppReference);


    @Override public java.lang.String title() {
        com.sos.scheduler.engine.cplusplus.runtime.CppProxy$.MODULE$.requireCppThread();
        try {
            java.lang.String result = title__native(cppReference());
            checkIsNotReleased(java.lang.String.class, result);
            return result;
        }
        catch (Exception x) { throw com.sos.scheduler.engine.cplusplus.runtime.CppProxies.propagateCppException(x, this); }
    }

    private static native java.lang.String title__native(long cppReference);


    // </editor-fold>
}
